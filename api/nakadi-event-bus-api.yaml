swagger: '2.0'
info:
  title: Nakadi Event Bus API Definition
  description: |
    -----------
    Definitions
    -----------
    Nakadi at its core aims at being a generic and content-agnostic event broker with a convenient API.
    In doing this, Nakadi abstracts away, as much as possible, details of the backing messaging
    infrastructure. The single currently supported messaging infrastructure is Kafka (Kinesis is planned
    for the future).

    In Nakadi every Event has an EventType, and a **stream** of Events is exposed for each registered
    EventType.

    An EventType defines properties relevant for the operation of its associated stream, namely:

    * The **schema** of the Event of this EventType. The schema defines the accepted format of Events of an
    EventType and will be, if so desired, enforced by Nakadi. Usually Nakadi will respect the schema for the
    EventTypes in accordance to how an owning Application defines them.
      **Note:** *Currently the specification of the schema must be pushed into Nakadi on EventType creation;
      in the future, assuming that Applications will expose the schema for its owned resources, Nakadi might
      support fetching the schema directly from them.*
      Nakadi might define globally minimal schema complience requirements (i.e. some fields that must be
      present on schemas of all EventTypes).

    * The expected **validation** and **enrichment** procedures upon reception of an Event.
      (*TODO: define validation and enrichment*)

    * The **ordering** expectations of Events in this stream. (*TODO: define ordering not in terms of
    partitioning*)

    Except for defined enrichment rules, Nakadi will never manipulate the content of any Event.

    Clients of Nakadi can be grouped in 2 categories: **Application owners** and **Clients** (clients in turn
    are both **Producers** and **Consumers** of Events). Application owners interact with Nakadi via the
    **Schema Registry API** for the definition of EventTypes, while Clients via the **Stream API** for
    submission and reception of Events. A low level **Topic API** is available, providing full control and
    responsibility of position tracking and partitioning (and therefore ordering) to the Clients.

    The consumption of Events proceeds via the establishment of a named **Subscription** to an EventType.
    Subscriptions are persitent relationships from an Application (which might have several instances) and the
    stream of an EventType, whose consumption tracking is managed by Nakadi, freeing Consumers from any
    responsibility in tracking the current position on a Stream.


    Scope and status of this document
    -------------------------------

    The present API specification is in **draft** state and is subject to change.

    In this document, ready for review are included:
    * The Schema Registry API, including configuration possibilities for the Schema, Validation, Enrichment
    and Partitioning of Events, and their effects on reception of Events.

    * The Stantardised event format (see #/definitions/Event) (Note: at a later moment this will be
    configurable and not be inherent part of this API).

    * Topic API (low level).

    Other aspects of the Event Bus are at this moment to be defined and otherwise specificied, not included in
    this version of this specification.

    Notable omissions here are:
    * The contract between Nakadi and clients in the context of the high-level API (i.e. the process for
    clients to establish subscriptions).

    * Submission of events to topics in batched manner.

    * Validation and enrichment procedures.

    * Security scopes (OAuth) for the different operations

    * Validation and Enrichment Strategies available in Nakadi are out of this document an can be consulted in
    an external document (TBD link to document).


  version: '0.5'
  contact:
    name: Team Aruha @ Zalando
    email: team-aruha+nakadi-maintainers@zalando.de
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  oauth2:
    type: oauth2
    flow: implicit
    authorizationUrl: 'https://auth.example.com/oauth2/tokeninfo'

paths:
  /metrics:
    get:
      tags:
        - monitoring
      summary: Get monitoring metrics
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Metrics'
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
  /event-types:
    get:
      tags:
        - schema-registry-api
      description: Returns a list of all registered `EventType`s
      responses:
        '200':
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/EventType'
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Problem'

    post:
      tags:
        - schema-registry-api
      description: |
        Creates a new `EventType`. Upon creation the name MUST be unique. Failing to do so will fail the
        request with a 422 Unprocessable entity.

        **Implementation note:** The creation of an EventType implicitly creates the structures in the backing
        messaging implementation needed for the reception and persistency of the Events. Considering that at
        this time only Kafka is used, this corresponds to the creation of a Topic. If so desired, clients can
        interact directly with the topic using the low level API (for existing restrictions see the
        corresponding methods on the topic-api).

        The fields validation-strategies, enrichment-strategies and partition-resolution-strategy have all an
        effect on the incoming Event of this EventType. For its impacts on the reception of events please
        consult the Event submission API methods.

        * Validation strategies define an array of `EventValidationStrategy` to be evaluated on reception of
        an `Event` of this `EventType`. Details of usage can be found in an external document (TBD link to
        document).
        **Notes**: Some EventValidationStrategies might support additional parameters. The behaviour is
        specific to each strategy and one is suggested to consult its `doc` field for detailes of operation.
        The default `SchemaValidationStrategy` supports passing fields to be ignored if the qualifier matches
        the input.

        * TDB Enrichment strategy

        * TDB Partition resolution strategy

        * The schema of an `EventType` is defined as an `EventTypeSchema`. Currently only json-schema is
        supported. Using `EventTypeSchema.type` other than json-schema or passing a EventTypeSchema.schema
        that is invalid with respect tothe type will fail this creation with a 422 Unprocessable entity.
        Detailes will be included in the response's Problem.

        Nakadi MIGHT impose necessary schema, validation and enrichment minimal configurations that MUST be
        followed by all EventTypes (examples include: validation rules to match the schema; enriching every
        Event with the reception date-type; adhering to a set of schema fields that are mandatory for all
        EventTypes). **The mechanism to set and inspect such rules is not defined at this time and might not
        be exposed in the API.**

      parameters:
        - name: event-type
          in: body
          description: EventType to be created
          schema:
            type: object
            $ref: '#/definitions/EventType'
          required: true
      responses:
        '200':
          description: Ok
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Problem'


  /event-types/{name}:
    get:
      tags:
        - schema-registry-api
      description: |
        Returns the `EventType` identified by its name.
      parameters:
        - name: name
          in: path
          description: Name of the EventType to load.
          type: string
          required: true
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/EventType'
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: EventType not found
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Problem'

    put:
      tags:
        - schema-registry-api
      description: |
        Updates the `EventType` identified by its name. Behaviour is the same as creation of `EventType` (POST
        /event-type) except where noted below.

        The name and the topic fields cannot be changed. Attempting to do so will result in a 422 failure.

        At this moment changes in the schema are not supported and will produce a 422 failure. (TODO: define
        conditions for backwards compatible extensions in the schema)
      parameters:
        - name: name
          in: path
          description: Name of the EventType to update.
          type: string
          required: true
        - name: event-type
          in: body
          description: EventType to be updated.
          schema:
            type: object
            $ref: '#/definitions/EventType'
          required: true

      responses:
        '200':
          description: Ok
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: EventType not found.
          schema:
              $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Problem'

  /event-types/{name}/events:
    post:
      description: |
        Publishes one or more events of this EventType.

        Reception of Events will always respect the configuration of its EventType w.r.t. validation,
        enrichment and partitioning. The steps performed on reception of incoming message are:

        1. Every validation rule specified in the `EventType` will be checked in order against the incoming
        Events. Validation rules are evaluated in the order they are defined and the Event is **rejected**
        in the first case of failure with a status of 400 Bad request. If the offending validation rule
        provides information about the violation it will be included in the Problem response.
        If the `EventType` defines schema validation it will be performed at this moment.
        **TBD behaviour in case of violation within a stream of events**)

        1. Once the validation succeeded, the content of the Event is updated according to the enrichment
        rules in the order the rules are defined in the `EventType`.
        No preexisting value might be changed (even if added by an enrichment rule). Violations on this will
        force the immediate **rejection** of the Event with a 409 Conflict status. The invalid overwrite
        attempt will be included in the respose's Problem object.

        1. The incoming Event's relative ordering is evaluated according to the rule on the
        `EventType`. Failure to evaluate the rule will **reject** the Event.
        **Restriction**: POSTing Events based on its `EventType` requires it to have a
        `PartitioningStrategy` defined. Violating this condition will produce a 405 Not allowed.

      parameters:
        - name: name
          in: path
          type: string
          description: Name of the EventType
          required: true
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/Problem'
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: EventType not found.
          schema:
              $ref: '#/definitions/Problem'
        '405':
          description: Not allowed.
          schema:
              $ref: '#/definitions/Problem'
        '409':
          description: Conflict.
          schema:
              $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Problem'

  /topics:
    get:
      description: Lists all known `Topics` of this Nakadi cluster
      tags:
        - monitoring
        - management-api
      responses:
        '200':
          description: The request was successful. Returns a list `Topic`s in the response body.
          schema:
            type: array
            description: An array of topics
            items:
              $ref: '#/definitions/Topic'
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Problem'

        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'

  '/topics/{topic}/events':
    get:
      tags:
        - topic-api
        - draft
      description: |
        Starts a stream delivery for the specified partitions of the given topic.

        The event stream is formated as a sequence of `EventStreamBatch`es separated by `\n`. Each
        `EventStreamBatch` constains a chunk of Events and a `Cursor` pointing to the end of the chunk (i.e.
        last delivered Event).
        If streaming for several distinct partitions, each one is a independent `EventStreamBatch`.

        The initialization of a stream can be parameterized in terms of size of each chunk, timeout for
        flushing each chunk, total amount of delivered Events and total time for the duration of the stream.

        Nakadi will keep a streaming connection open even if there are no events to be delivered. In this case
        the timeout for the flushing of each chunk will still apply and the `EventStreamBatche`s will contain
        only the Cursor pointing to the same offset. This can be treated as a keep-alive control for some
        load balancers.

        The tracking of the current position in the partitions and of which partitions is being read is in
        the responsibility of the client.
        No commits are needed.
      parameters:
        - name: topic
          in: path
          description: Topic where to get events from
          type: string
          required: true
        - name: x-nakadi-cursors
          in: header
          description: Array of cursors indicating the partitions to read from and the starting point on
            each. Assumes the offset on each cursor is not inclusive (i.e., first delivered Event is the
            **first one after** the one pointed to in the cursor).
          required: false
          type: array
          items:
            type: string
            format: '#/definitions/Cursor'
        - name: batch_limit
          in: query
          description: |
            Maximum number of `Event`s in each chunk (and therefore per partition) of the stream.

            * If 0 or unspecified will buffer Events indefinitely and flush on reaching of
            `batch_flush_timeout`.
          type: integer
          format: int32
          required: false
          default: 1
        - name: stream_limit
          in: query
          description: |
            Maximum number of `Event`s in this stream (over all partitions being streamed in this connection).

            * If 0 or undefined, will stream batches indefinately.

            * Stream initialization will fail if `stream_limit` is lower than `batch_limit`.
          type: integer
          format: int32
          required: false
          default: 0
        - name: batch_flush_timeout
          in: query
          description: |
            Maximum time in seconds to wait for the flushing of each chunk (per partition).

            * If the amount of buffered Events reaches `batch_limit` before this batch_flush_timeout is
            reached, the messages are immediately flushed to the client.
            * If 0 or undefined, will assume 30 seconds.
          type: integer
          format: int32
          required: false
          default: 30
        - name: stream_timeout
          in: query
          description: |
            Maximum time in seconds a stream will live before being interrupted.
            If unspecified will stream indefinately.

            If this timeout is reached, any pending messages (in the sense of `stream_limit`) will be flushed
            to the client.

            Stream initialization will fail if `stream_timeout` is lower than
            `batch_flush_timeout`.
          type: integer
          format: int32
          required: false
        - name: batch_keep_alive_limit
          in: query
          description: |
            Maximum number of keep-alive messages to get in a row before closing the connection. Unlimited by
            default.
          type: integer
          format: int32
          required: false
      responses:
        '200':
          description: |
            Starts streaming to the client.
            Stream format is a continuous series of `EventStreamBatch`s separated by `\n`
          schema:
            $ref: '#/definitions/EventStreamBatch'
        '400':
          description: Bad syntax
          schema:
            $ref: '#/definitions/Problem'
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: |
            Topic not found.
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable entity
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Internal Server Error. Details are provided on the returned `Problem`.
          schema:
            $ref: '#/definitions/Problem'
    post:
      tags:
        - topic-api
        - draft
      description: |
        Post a one or more `Event`s to a given `Topic` (of an `EventType`). Upon recpetion the `EventType`'s
        validation and enrichment rules are applied. For details on their behaviour please see POST /even
        t-types/{name}/events.

        Restriction: To avoid inconsistencies in the relative ordering of Events, **this operation cannot be
        used if this
        Topic's defining EventType defines a `PartitionResolutionStrategy`.** Doing so will produce a 405 Not
        allowed.
      parameters:
        - name: topic
          in: path
          description: Topic name where to send events to
          type: string
          required: true
        - name: event
          in: body
          description: The body contains an array of events being sent.
          required: true
          schema:
            type: array
            description: An array of events to be pushed to Nakadi
            items:
              $ref: '#/definitions/Event'
        - name: Content-Encoding
          in: header
          required: false
          description: |
            Allow the publisher to gzip compress the payload by setting this header to "gzip".
            For Example "Content-Encoding: gzip"
          type: string
      responses:
        '201':
          description: All events are submitted successfully.
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '403':
          description: Not allowed
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: |
            Topic not found.
          schema:
            $ref: '#/definitions/Problem'
        '405':
          description: |
            Method not allowed. This topic does not support direct POSTing of Events. Use equivalent POST
            /event-types/{name}/events instead.
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Problem'

        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'

  '/topics/{topic}/partitions':
    get:
      tags:
        - topic-api
        - management-api
      description: Lists the `Partition`s for the given topic
      parameters:
        - name: topic
          in: path
          description: Topic name
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: array
            description: An array of `Partition`s
            items:
              $ref: '#/definitions/Partition'
        '404':
          description: |
            Topic not found.
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Problem'

  '/topics/{topic}/partitions/{partition}':
    get:
      tags:
        - topic-api
        - management-api
      description: Returns the given `Partition` of this topic
      parameters:
        - name: topic
          in: path
          description: Topic name
          type: string
          required: true
        - name: partition
          in: path
          description: Partition id.
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Partition'
        '401':
          description: Client is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: |
            Not found.
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Problem'

  '/topics/{topic}/partitions/{partition}/events':
    post:
      tags:
        - topic-api
        - draft
      description: |
        Post a one or more `Event`s to a given `Topic` (of an `EventType`). Upon recpetion the `EventType`'s
        validation and enrichment rules are applied. For details on their behaviour please see POST
        /event-types/{name}/events.

        Restriction: To avoid inconsistencies in the relative ordering of Events, **this operation cannot be
        used if this
        Topic's defining EventType defines a `PartitionResolutionStrategy`.** Doing so will produce a 405 Not
        allowed.
      parameters:
        - name: topic
          in: path
          description: Topic where to send events to.
          type: string
          required: true
        - name: partition
          in: path
          description: Partition where which the events are stored.
          type: string
          required: true
        - name: Content-Encoding
          in: header
          required: false
          description: |
            Allow the publisher to gzip compress the payload by setting this header to "gzip". For Example
            "Content-Encoding: gzip"
          type: string
        - name: event
          in: body
          description: Array of `Event`s being sent.
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
      responses:
        '201':
          description: Event submitted.
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '403':
          description: Not allowed
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: |
            Not found.
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Problem'

        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'

  '/registry/validation-rule':
    get:
      tags:
        - schema-registry-api
      description: |
        asdf
      responses:
        '200':
          description: Returns a list of all `EventValidationStrategy` known to Nakadi
          schema:
            type: array
            items:
              $ref: '#/definitions/EventValidationStrategy'


# ################################### #
#                                     #
#             Definitions             #
#                                     #
# ################################### #

definitions:
  Event:
    type: object
    description: |
      **To be changed**. This is the most general representation of an event, that can be processed
      by Nakadi.

      It should be used as a base definition for all events, that flow through
      Nakadi by extending attributes of this object type.
    properties:
      event_type:
        type: string
        example: 'https://resource-events.zalando.com/ResourceCreated'
      partitioning_key:
        type: string
        example: 'ABC123XXX-001'
      metadata:
        $ref: '#/definitions/EventMetaData'
  EventMetaData:
    type: object
    properties:
      id:
        type: string
        format: uuid
      created:
        type: string
        format: date-time
      root_id:
        type: string
        format: uuid
      parent_id:
        type: string
        format: uuid
      scopes:
        type: array
        items:
          type: string

  Problem:
    type: object
    properties:
      type:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the problem type.  When dereferenced,
          it SHOULD provide human-readable API documentation for the problem type
          (e.g., using HTML).
          This Problem object is the same as provided by https://github.com/zalando/problem
        example: http://httpstatus.es/503
      title:
        type: string
        description: |
          A short, summary of the problem type. Written in english and readable
          for engineers (usually not suited for non technical stakeholders and
          not localized); example: Service Unavailable
      status:
        type: integer
        format: int32
        description: |
          The HTTP status code generated by the origin server for this occurrence
          of the problem.
        example: 503
      detail:
        type: string
        description: |
          A human readable explanation specific to this occurrence of the
          problem.
        example: Connection to database timed out
      instance:
        type: string
        format: uri
        description: |
          An absolute URI that identifies the specific occurrence of the problem.
          It may or may not yield further information if dereferenced.
    required:
      - type
      - title
      - status

  Metrics:
    type: object

  Topic:
    description: |
      Representation of the underlying (implementation dependent) event ordering and persistence structure.

      Direct operation on this is usually unnecessary.
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Topic name
        example: article.120
  Partition:
    required:
      - partition
      - oldest_available_offset
      - newest_available_offset
    properties:
      partition:
        type: string
      oldest_available_offset:
        type: string
      newest_available_offset:
        type: string
  Cursor:
    required:
      - partition
      - offset
    properties:
      partition:
        type: string
      offset:
        type: string
  EventStreamBatch:
    description: |
      One chunk of events in a stream. A batch consists of an array of `Event`s plus a `Cursor` pointing to
      the offset of the last Event in the stream.

      The size of the array of Event is limited by the parameters used to initialize a Stream.
    required:
      - cursor
    properties:
      cursor:
        $ref: '#/definitions/Cursor'
      events:
        type: array
        items:
          $ref: '#/definitions/Event'

  EventType:
    description: An event type defines the schema and its runtime properties.
    properties:
      name:
        type: string
        description: |
          Name of this EventType. The name for the EventType must follow the pattern
          'organization:team:application:event-type-name'
      topic:
        type: string
        description: |
          References the name of the low-level topic that is holding the stream of Events for this EventType.
          Usually is the same as the name property.
      validation-strategies:
        description: |
          Determines the validation that has to be executed upon reception of Events of this type. Events are
          rejected if any of the rules fail (see details of Problem response on the Event publishing methods).

          Rule evaluation order is the same as in this array.
        type: array
        items:
          $ref: '#/definitions/EventValidationStrategy'

      enrichment-strategies:
        description: |
          Determines the enrichment to be performed on an Event upon reception. Enrichment is performed once
          upon reception (and after validation) of an Event and is only possible on fields that are not
          defined on the incoming Event.

          See documentation for the write operation for details on behaviour in case of unsuccessful
          enrichment.
        type: array
        items:
          $ref: '#/definitions/EventEnrichmentStrategy'

      partition-resolution-strategy:
        description: |
          Determines how the assignment of the event to a Partition should be handled.

        type: object
        $ref: '#/definitions/PartitionResolutionStrategy'

      schema:
        type: object
        $ref: '#/definitions/EventTypeSchema'
        description: |
          The schema for this EventType. This is expected to be a json schema in yaml format (other formats
          might be added in the future).
    required:
      - name

  EventTypeSchema:
    properties:
      type:
        type: string
        example: 'json-schema'
        description: The type of schema definition (avro, json-schema, etc).
      schema:
        type: string
        description: |
          The schema as string in the syntax defined in the field type. Failure to respect the syntax will
          fail any operation on an EventType.
    required:
      - type
      - schema

  EventValidationStrategy:
    description: |
      Defines a rule for validation of an incoming Event.

      Rules might require additional parameters; see the `doc` field of the existing rules for details. See
      GET /registry/validation-rules for a list of available rules.
    properties:
      name:
        type: string
        description: Name of the strategy.
      doc:
        type: string
        description: Documentation for the validation.
    required:
      - name
      - doc


  PartitionResolutionStrategy:
    description: |
      Defines a rule for the resolution of incoming Events into partitions of a Topic.

      Rules might require additional parameters; see the `doc` field of the existing rules for details. See
      GET /registry/partition-rules for a list of available rules.
    properties:
      name:
        type: string
        description: Name of the strategy.
      doc:
        type: string
        description: Documentation for the partition resolution.
    required:
      - name
      - doc

  EventEnrichmentStrategy:
    description: |
      Defines a rule for transformation of an incoming Event. No existing fields might be modified. In
      practice this is used to set automatically values in the Event upon reception (i.e. set a reception
      timestamp on the Event).

      Rules might require additional parameters; see the `doc` field of the existing rules for details. See
      GET /registry/enrichment-rules for a list of available rules.
    properties:
      name:
        type: string
        description: Name of the strategy.
      doc:
        type: string
        description: Documentation for the enrichment.
    required:
      - name
      - doc

import java.util.concurrent.TimeUnit

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'spring-boot'
apply plugin: "jacoco"
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

group 'org.zalando'
sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'org.zalando.nakadi.Application'
springBoot {
    layout = "ZIP"
}

def dockerGroup = "aruha"
def dockerApplicationName = "nakadi"

/* config parameters */
def dockerImageName = "$dockerGroup/$dockerApplicationName"
if (project.hasProperty("dockerImageName")) {
    dockerImageName = project.property("dockerImageName")
}
def dockerImageVersion = "AUTOBUILD"
if (project.hasProperty("dockerImageVersion")) {
    dockerImageVersion = project.property("dockerImageVersion")
}
def dockerImageTag = "$dockerImageName:$dockerImageVersion"

def dockerBuildTimeout = 300

def dockerFile = "Dockerfile"
if (project.hasProperty('dockerFile')) {
    dockerFile = project.property("dockerFile")
}

repositories {
    mavenCentral()
}

sourceSets {
    acceptanceTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/acceptance-test/java')
        }
        resources.srcDir file('src/acceptance-test/resources')
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE"
        classpath 'org.yaml:snakeyaml:1.14'
    }
}

jar {
    baseName = 'nakadi'
}

configurations {
    all*.exclude module : 'spring-boot-starter-logging'
    acceptanceTestCompile.extendsFrom testCompile
    acceptanceTestRuntime.extendsFrom testRuntime
    pgsql
}

findbugs {
    reportLevel = "high"
    sourceSets = []
}

dependencies {
    ext {
        dropwizardVersion = '3.1.2'
    }

    pgsql 'org.postgresql:postgresql:9.4.1207'
    // spring
    compile('org.springframework.boot:spring-boot-starter-web:1.3.1.RELEASE') {
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
    }
    compile 'org.springframework:spring-context:4.2.0.RELEASE'
    compile 'org.springframework:spring-web:4.2.0.RELEASE'
    compile 'org.springframework:spring-webmvc:4.2.0.RELEASE'

    // oauth
    compile 'org.springframework.security.oauth:spring-security-oauth2:2.0.8.RELEASE'
    compile('org.springframework.boot:spring-boot-starter-security') {
        exclude module: "logback-classic"
    }

    // actuator
    compile 'org.springframework.boot:spring-boot-starter-actuator:1.3.1.RELEASE'
    compile 'org.zalando.zmon:zmon-actuator:0.9.3'

    // storage
    compile 'org.springframework.boot:spring-boot-starter-jdbc:1.3.1.RELEASE'
    compile 'org.postgresql:postgresql:9.4.1207'

    compile 'org.springframework.cloud:spring-cloud-starter-hystrix:1.1.3.RELEASE'

    // misc
    compile 'org.apache.httpcomponents:httpclient:4.5.1'
    compile ('org.zalando.stups:stups-spring-oauth2-server:1.0.10') {
        exclude module: "httpclient"
    }
    compile 'org.zalando:jackson-datatype-problem:0.5.0'
    compile 'org.zalando:problem:0.5.0'
    compile 'org.zalando:problem-spring-web:0.5.0'
    compile 'com.google.guava:guava:19.0'
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    compile 'org.slf4j:slf4j-log4j12:1.7.14'
    compile "io.dropwizard.metrics:metrics-core:$dropwizardVersion"
    compile "com.ryantenney.metrics:metrics-spring:$dropwizardVersion"
    compile "io.dropwizard.metrics:metrics-servlets:$dropwizardVersion"
    compile "io.dropwizard.metrics:metrics-jvm:$dropwizardVersion"
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.zalando:problem-spring-web:0.5.0'
    compile 'org.zalando:jackson-datatype-problem:0.5.0'
    compile 'org.zalando:nakadi-plugin-api:1.0.5'
    compile 'org.echocat.jomon:runtime:1.6.2'

    // kafka & zookeeper
    compile 'org.apache.kafka:kafka-clients:0.10.1.0'
    compile 'org.apache.kafka:kafka_2.11:0.10.1.0'
    compile 'org.apache.kafka:kafka-streams:0.10.1.0'
    compile 'org.apache.curator:curator-framework:2.9.1'
    compile 'org.apache.curator:curator-recipes:2.9.1'

    // json
    compile 'org.everit.json:org.everit.json.schema:1.4.0'
    compile ('com.fasterxml.jackson.datatype:jackson-datatype-json-org:2.4.0') {
        exclude module: "json"
    }
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.4.0'

    // tests
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile('junit:junit:4.12') {
        exclude module: "hamcrest-core"
    }
    testCompile 'org.springframework:spring-test:4.3.2.RELEASE'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.skyscreamer:jsonassert:1.3.0'
    testCompile 'uk.co.datumedge:hamcrest-json:0.2'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile('com.jayway.restassured:rest-assured:2.5.0') {
        exclude module: "hamcrest-core"
        exclude module: "hamcrest-library"
    }
    testCompile 'com.jayway.jsonpath:json-path:2.2.0'
    testRuntime 'org.pegdown:pegdown:1.1.0'
}
// end::dependencies[]

// tag::wrapper[]
task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task generateScmSourceJson() {
    def rev = new ByteArrayOutputStream()
    exec {
        commandLine "git", "rev-parse", "HEAD"
        standardOutput = rev
    }
    rev = rev.toString().trim()

    def url = new ByteArrayOutputStream()
    exec {
        commandLine "git", "config", "--get", "remote.origin.url"
        standardOutput = url
    }
    url = url.toString().trim()

    def status = new ByteArrayOutputStream()
    exec {
        commandLine "git", "status", "--porcelain"
        standardOutput = status
    }
    status = status.toString().trim().replaceAll("[\n\r]", "\\\\n")
    if (status) {
        rev = "$rev (locally modified)"
    }
    def scmSource = new FileOutputStream("scm-source.json")
    scmSource.write("{\"url\": \"git:${url}\", \"revision\":\"${rev}\", \"author\": \"${System.getenv()['USER']}\", \"status\": \"${status}\"}".getBytes())
    scmSource.close()
}

task buildDockerImage {
    dependsOn bootRepackage, generateScmSourceJson
    doLast {
        println "Building docker image with tag: $dockerImageTag from dockerfile: $dockerFile"
        if (execAndWait("docker build -t " + dockerImageTag + " -f " + dockerFile + " .", dockerBuildTimeout) != 0) {
            throw new GradleException("docker build failed.")
        }
    }
    outputs.upToDateWhen { false }
}

task pushDockerImage {
    dependsOn buildDockerImage
    doLast {
        println "Pushing docker image with tag: $dockerImageTag"
        if (execAndWait("docker push " + dockerImageTag, dockerBuildTimeout) != 0) {
            throw new GradleException("docker push failed.")
        }
    }
}

task testInitNakadi(type: Exec) {
    environment "SPRING_PROFILES_ACTIVE", "acceptanceTest"
    commandLine "bash", "-c", "docker-compose up -d --build"
    doLast {
        println "Waiting for Nakadi to start up"
        long start = System.currentTimeMillis()
        waitForNakadi()
        println "Nakadi is fully started in " + (System.currentTimeMillis() - start) + " ms"
    }
}

task initNakadi(type: Exec) {
    commandLine "bash", "-c", "docker-compose up -d --build"
    doLast {
        println "Waiting for Nakadi to start up"
        long start = System.currentTimeMillis()
        waitForNakadi()
        println "Nakadi is fully started in " + (System.currentTimeMillis() - start) + " ms"
    }
}

task startNakadi(type: GradleBuild) {
    tasks = ['clean', 'bootRepackage', 'initNakadi']
}

task stopNakadi(type: Exec) {
    commandLine "bash", "-c", "docker-compose down"
}

def waitForNakadi() {
    // wait till application is up (health check is successful)
    int result = 1
    while (result != 0) {
        result = execAndWait('curl http://localhost:8080/health')
        sleep(1000L)
    }
}

def execAndWait(command, timeoutInSeconds = 15) {
    println "Running command: " + command
    ProcessBuilder pb = new ProcessBuilder(["bash", "-c", command]).inheritIO();
    Process proc = pb.start();
    proc.waitFor(timeoutInSeconds, TimeUnit.SECONDS);
    return proc.exitValue()
}

task startStorages(type: Exec) {
    commandLine "bash", "-c", "docker-compose up -d postgres zookeeper kafka"
}

task stopStorages(type: Exec) {
    commandLine "bash", "-c", "docker-compose down"
}

task fullTest(type: GradleBuild) {
    tasks = ['clean', 'bootRepackage', 'testInitNakadi', 'test', 'acceptanceTest']
    finalizedBy stopNakadi
}

task fullAcceptanceTest(type: GradleBuild) {
    tasks = ['clean', 'bootRepackage', 'testInitNakadi', 'acceptanceTest']
    finalizedBy stopNakadi
}

task acceptanceTest(type: Test) {
    testClassesDir = sourceSets.acceptanceTest.output.classesDir
    classpath = sourceSets.acceptanceTest.runtimeClasspath
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
    testLogging.exceptionFormat = 'full'
}

acceptanceTest {
    testLogging {
        events "passed", "skipped", "failed"
    }
    testLogging.exceptionFormat = 'full'
}

bootRun {
    addResources = false
    main = 'org.zalando.nakadi.Application'
    environment 'NAKADI_OAUTH2_MODE', 'OFF'
    environment 'NAKADI_FEATURETOGGLE_DEFAULT', 'true'
}

run {
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task testWithReport() {
    dependsOn test
    finalizedBy jacocoTestReport
}

checkstyle {
    configFile = new File(rootDir, "checkstyle.xml")
}

task checkstyle {
    dependsOn checkstyleMain, checkstyleTest, checkstyleAcceptanceTest
}
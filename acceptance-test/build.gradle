buildscript {
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.yaml:snakeyaml:1.21'
        classpath 'org.owasp:dependency-check-gradle:5.3.2.1'
    }
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'project-report'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.owasp.dependencycheck'

group 'org.zalando'

sourceSets {
    acceptanceTest {
        java {
            srcDir file('src/acceptance-test/java')
        }
        resources.srcDir file('src/acceptance-test/resources')
    }
}

configurations {
    all*.exclude module: 'spring-boot-starter-logging'
    all*.exclude group: "com.vaadin.external.google", module: "android-json"
    acceptanceTestImplementation.extendsFrom testImplementation
    acceptanceTestRuntime.extendsFrom testRuntime
}

dependencies {
    // Override spring-boot BOM versions
    ext['json.version'] = '20180130'
    ext['json-path'] = '2.4.0'
    ext['jsonassert'] = '1.5.0'

    implementation project(':core-services')
    implementation project(':api-metastore')
    implementation project(':api-cursors')

    // spring
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation "org.springframework.boot:spring-boot-starter-jetty"
    implementation "org.springframework.boot:spring-boot-starter-json"
    implementation('org.springframework.boot:spring-boot-starter-security') {
        exclude module: "logback-classic"
    }

    runtimeOnly 'org.zalando:jackson-datatype-problem:0.22.0'
    runtimeOnly "org.apache.kafka:kafka-clients:$kafkaClientVersion"

    // tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation project(path: ':core-services', configuration: 'testOutput')

    testRuntimeOnly 'org.pegdown:pegdown:1.6.0'
}

tasks.register("acceptanceTest", Test.class) {
    classpath = sourceSets.acceptanceTest.runtimeClasspath
    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    testLogging {
        events "passed", "skipped", "failed"
    }
    testLogging.exceptionFormat = 'full'
    maxParallelForks = 1
}

bootJar {
    enabled = false
}
jar {
    enabled = true
}

SenzaInfo:
  StackName: "{{Arguments.StackName}}"
  Parameters:
    - DockerTag:
        Description: "Name of the Docker image providing Nakadi."
    - StackName:
        Description: "Name of the Cloud Formation Stack"
    - ApplicationId:
        Description: "Application id"
    - ApplicationVersion:
        Description: "Application version"
        Default: "nakadi"
    - MintBucket:
        Description: "Name of the mint bucket to use for this application"
    - ScalyrAccountKey:
        Description: "Key for Scalyr logging (optional)"
        Default: ""
    - InstanceType:
        Description: "The EC2 Instance type that is used for the Nakadi instances (optional, default: t2.micro)"
        Default: "t2.micro"
    - InstancesMinimum:
        Description: "The minimum number of instances of the AutoScalingGroup (optional, default: 2)"
        Default: 2
    - InstancesMaximum:
        Description: "The maximum number of instances of the AutoScalingGroup (optional, default: 5)"
        Default: 5
    - ZookeeperKafkaNamespace:
        Description: "Namespace in Zookeeper used by Buku (Kafka) (optional)"
        Default: ""
    - ExhibitorBrokers:
        Description: "List of exhibitor brokers (comma separated)"
    - ExhibitorPort:
        Description: "Exhibitor port (ptional, default 8181)"
        Default: "8181"
    - LimitTrafficToCidr:
        Description: "Allows request to the loadbalancer of Nakadi to only this ip address range given in cidr notation (optional, default: 0.0.0.0/0)"
        Default: "0.0.0.0/0"
    - DatabaseUrl:
        Description: "Jdbc url, value can be encrypted with KMS"
        Default: "jdbc:postgresql://localhost:5432/local_nakadi_db"
    - DatabaseUser:
        Description: "The username to use when connecting to the database"
        Default: "nakadi_app"
    - DatabasePassword:
        Description: "value can be encrypted with KMS"
        Default: "nakadi"
    - KmsKeyId:
        Description: "Identifier of your KMS key"
        Default: ""
    - AuthenticationMode:
        Description: "Authentication mode for Nakadi. Possible values: OFF (no authentication required) / BASIC (only token validity will be checked) / FULL (full authentication using oauth2 scopes) (optional, default: BASIC)"
        Default: "BASIC"
    - TokenInfoUrl:
        Description: "Authentication server token-info endpoint URL"
        Default: "https://example.com/tokeninfo"
    - ReplicaFactor:
        Description: "Replica factor for event broker"
        Default: "3"
    - JavaOpts:
        Description: "Java opts to be passed to jvm"
        Default: ""
    - SSLCertificateId:
        Description: "Id of ssl certificate to use"
        Default: ""

SenzaComponents:

  - Configuration:
      Type: Senza::StupsAutoConfiguration # auto-detect network setup

  - AppServer:
      Type: Senza::TaupageAutoScalingGroup
      InstanceType: "{{Arguments.InstanceType}}"
      SecurityGroups:
        - "Fn::GetAtt":
          - "NakadiSecurityGroup"
          - "GroupId"
      IamInstanceProfile:
        Ref: NakadiIamInstanceProfile
      ElasticLoadBalancer: AppLoadBalancer
      AssociatePublicIpAddress: false
      TaupageConfig:
        application_id: "{{Arguments.ApplicationId}}"
        application_version: "{{Arguments.ApplicationVersion}}"
        application_logrotate_interval: hourly
        application_logrotate_size: 50M
        application_logrotate_rotate: 4
        mint_bucket: "{{Arguments.MintBucket}}"
        runtime: Docker
        source: "{{Arguments.DockerTag}}:{{Arguments.ApplicationVersion}}"
        health_check_path: /health
        ports:
          8080: 8080
        scalyr_account_key: "{{Arguments.ScalyrAccountKey}}"
        environment:
          NAKADI_OAUTH2_MODE: "{{Arguments.AuthenticationMode}}"
          NAKADI_OAUTH2_TOKENINFOURL: "{{Arguments.TokenInfoUrl}}"
          NAKADI_ZOOKEEPER_KAFKANAMESPACE:    "{{Arguments.ZookeeperKafkaNamespace}}"
          NAKADI_ZOOKEEPER_EXHIBITOR_BROKERS: "{{Arguments.ExhibitorBrokers}}"
          NAKADI_ZOOKEEPER_EXHIBITOR_PORT:    "{{Arguments.ExhibitorPort}}"
          NAKADI_TOPIC_DEFAULT_REPLICAFACTOR: "{{Arguments.ReplicaFactor}}"
          SPRING_DATASOURCE_URL: "{{Arguments.DatabaseUrl}}"
          SPRING_DATASOURCE_USERNAME: "{{Arguments.DatabaseUser}}"
          SPRING_DATASOURCE_PASSWORD: "{{Arguments.DatabasePassword}}"
          JAVA_OPTS: "{{Arguments.JavaOpts}}"
      AutoScaling:
        Minimum: 2
        Maximum: "{{Arguments.InstancesMaximum}}"
        MetricType: CPU
        ScaleUpThreshold: 40
        ScaleDownThreshold: 10
        Period: 60
        EvaluationPeriods: 3

  # creates an ELB entry and Route53 domains to this ELB
  - AppLoadBalancer:
      Type: Senza::WeightedDnsElasticLoadBalancer
      Listeners:
        - InstancePort: 8080
          InstanceProtocol: tcp
          LoadBalancerPort: 443
          Protocol: SSL
          SSLCertificateId: "{{Arguments.SSLCertificateId}}"
      HTTPPort: 8080
      HealthCheckPath: /health
      SecurityGroups:
        - "Fn::GetAtt":
          - "NakadiLBSecurityGroup"
          - "GroupId"
      ConnectionSettings:
        IdleTimeout: 3600
      Scheme: internet-facing

Resources:
  NakadiIamInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - Ref: "NakadiIamRole"

  NakadiIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - "sts:AssumeRole"
      Policies:
      - PolicyName: NakadiMintKMSAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Sid: "AllowMintRead"
            Action:
            - "s3:GetObject"
            - "s3:ListBucket"
            Effect: Allow
            Resource:
            - "arn:aws:s3:::{{Arguments.MintBucket}}"
            - "arn:aws:s3:::{{Arguments.MintBucket}}/{{Arguments.ApplicationId}}/*"
          - Effect: Allow
            Action:
            - "kms:Decrypt"
            - "kms:Encrypt"
            Resource:
            - "{{Arguments.KmsKeyId}}"

  NakadiSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: nakadi security group
      SecurityGroupIngress:
      # ssh
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      # http(s)
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      # for monitoring
      - IpProtocol: tcp
        FromPort: 9100
        ToPort: 9100
        CidrIp: 0.0.0.0/0

  NakadiLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: nakadi loadbalancer security group
      SecurityGroupIngress:
      # https
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: "{{Arguments.LimitTrafficToCidr}}"

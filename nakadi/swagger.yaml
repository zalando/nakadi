swagger: '2.0'
info:
  title: Nakadi
  description: |
    -------------------------
    API for nakadi operations
    -------------------------

    A few concepts in this working draft:

    * Stantardised event format (see #/definitions/Event);

    * Partition resolution: event store will infer the partition where a message
    needs to be set looking into the `partitioning_key` in the message body;

    * High level API should support automatic redistribution of the event streams
    during client topology changes.

  version: '0.3'
  contact:
    name: Team Aruha
    email: team-aruha@zalando.de
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  oauth2:
    type: oauth2
    flow: implicit
    authorizationUrl: 'https://auth.zalando.com/oauth2/tokeninfo'
    scopes:
      uid: Unique identifier of the user accessing the service.
paths:
  /metrics:
    get:
      tags:
        - monitoring
      summary: Get monitoring metrics
      operationId: nakadi.hack.get_metrics
      responses:
        '200':
          description: Metrics data
          schema:
            $ref: '#/definitions/Metrics'
        '401':
          description: User is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
  /topics:
    get:
      description: Lists all known `Topics` to Nakadi
      tags:
        - monitoring
      operationId: nakadi.hack.get_topics
      responses:
        '200':
          description: Returns list of all `Topic`s.
          schema:
            type: array
            items:
              $ref: '#/definitions/Topic'
        '401':
          description: User is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
  '/topics/{topic}/events':
    get:
      tags:
        - low-level-api
      operationId: nakadi.hack.get_events_from_multiple_partitions
      summary: |
        Starts a stream delivery for the specified partitions of the given topic.
        The tracking of the current position in the partitions and of which
        partitions is being read is in the responsibility of the client.
        No commits are needed.
      parameters:
        - name: topic
          in: path
          description: Topic where to get events from
          type: string
          required: true
        - name: x-nakadi-cursors
          in: header
          description: Cursors pointing to partitions/offsets to start read from
          required: false
          type: array
          items:
            $ref: '#/definitions/Cursor'
        - name: batch_limit
          in: query
          description: Maximum number of `SimpleStreamElement`s in each chunk of the stream. If unspecified assumes default value 1 (i.e. each event is individually submitted).
          type: integer
          format: int32
          required: false
          default: 1
        - name: stream_limit
          in: query
          description: |
            Maximum number of `Event`s in this stream. If 0 or undefined, will
            stream indefinately.

            Stream initialization will fail if `stream_limit` is lower than
            `batch_limit`.
          type: integer
          format: int32
          required: false
        - name: batch_flush_timeout
          in: query
          description: Maximum time in seconds to wait for the flushing of each chunk; if the `batch_limit` is reached before this time is reached the messages are immediately flushed to the client.
          type: integer
          format: int32
          required: false
        - name: stream_timeout
          in: query
          description: |
            Maximum time in seconds a stream will live before being interrupted.
            If unspecified will stream indefinately.

            If this timeout is reached any pending messages (in the sense of
            `stream_limit`) will be flushed to the client.

            Stream initialization will fail if `stream_timeout` is lower than
            `batch_flush_timeout`.
          type: integer
          format: int32
          required: false
        - name: batch_keep_alive_limit
          in: query
          description: Maximum number of keep-alive messages to get in a row before closing the connection. Unlimited by default.
          type: integer
          format: int32
          required: false
      responses:
        '200':
          description: |
            Starts streaming to the client.  
            Stream format is a continuous series of 
            `SimpleStreamEvent`s separated by `\n`
          schema:
            $ref: '#/definitions/SimpleStreamEvent'
        '400':
          description: Bad syntax
          schema:
            $ref: '#/definitions/Problem'
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: Not found. Typically in case of requesting from a non existing topic of partition.
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Not found. Typically in case of requesting from a non existing topic of partition.
          schema:
            $ref: '#/definitions/Problem'
    post:
      description: |
        Post a single `Event` to the given `Topic`.

        Partition selection is done using the defined partition resolution. The
        partition resolution strategy is defined per topic and is managed by
        Nakadi (currently resolved from a hash over `ordering_key`).

        If explicit control over to which partition in a topic an event is being
        sent to is needed, a client is advised to use the low level api.
      operationId: nakadi.hack.post_event
      parameters:
        - name: topic
          in: path
          description: Topic name where to send events to
          type: string
          required: true
        - name: event
          in: body
          description: Even being sent.
          schema:
            $ref: '#/definitions/Event'
      responses:
        '201':
          description: Event submitted.
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '403':
          description: Not allowed
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
  '/topics/{topic}/events/batch':
    post:
      description: |
        Post a batch of `Event`s to the given `Topic`.

        Partition selection is done using the defined partition resolution. The
        partition resolution strategy is defined per topic and is managed by
        Nakadi (currently resolved from a hash over `ordering_key`).

        If explicit control over to which partition in a topic an event is being
        sent to is needed, a client is advised to use the low level api.
      operationId: nakadi.hack.post_events
      parameters:
        - name: topic
          in: path
          description: Topic name where to send events to
          type: string
          required: true
        - name: event
          in: body
          description: Even being sent.
      responses:
        '201':
          description: Event submitted.
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '403':
          description: Not allowed
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
  '/topics/{topic}/partitions':
    get:
      tags:
        - low-level-api
        - monitoring
      summary: Lists the partitions for the given topic
      operationId: nakadi.hack.get_partitions
      parameters:
        - name: topic
          in: path
          description: Topic name
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/TopicPartition'
  '/topics/{topic}/partitions/{partition}':
    get:
      tags:
        - low-level-api
      summary: Returns the current state information for the given partition on this topic
      operationId: nakadi.hack.get_partition
      parameters:
        - name: topic
          in: path
          description: Topic name
          type: string
          required: true
        - name: partition
          in: path
          description: Partition id.
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TopicPartition'
  '/topics/{topic}/partitions/{partition}/events':
    post:
      tags:
        - low-level-api
      summary: Posts an event to the specified partition of this topic.
      operationId: nakadi.hack.post_event_to_partition
      parameters:
        - name: topic
          in: path
          description: Topic where to send events to.
          type: string
          required: true
        - name: partition
          in: path
          description: Partition where to send events to.
          type: string
          required: true
        - name: event
          in: body
          description: Even being sent.
          schema:
            $ref: '#/definitions/Event'
      responses:
        '201':
          description: Event submitted.
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '403':
          description: Not allowed
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
    get:
      tags:
        - low-level-api
        - depricated
      operationId: nakadi.hack.get_events_from_single_partition
      summary: |
        Starts a stream delivery for the specified partition of the given topic.
        The tracking of the current position in the partition and of which
        partition is being read is in the responsibility of the client.
        No commits are needed.
      parameters:
        - name: topic
          in: path
          description: Topic where to get events from
          type: string
          required: true
        - name: partition
          in: path
          description: Id of the partition where to get events from
          type: string
          required: true
        - name: start_from
          in: query
          description: Starting offset of the stream. Must be in the range defined by the `TopicPartition`.
          type: string
          required: true
        - name: batch_limit
          in: query
          description: Maximum number of `SimpleStreamElement`s in each chunk of the stream. If unspecified assumes default value 1 (i.e. each event is individually submitted).
          type: integer
          format: int32
          required: false
          default: 1
        - name: stream_limit
          in: query
          description: |
            Maximum number of `Event`s in this stream. If 0 or undefined, will
            stream indefinately.

            Stream initialization will fail if `stream_limit` is lower than
            `batch_limit`.
          type: integer
          format: int32
          required: false
        - name: batch_flush_timeout
          in: query
          description: |
            Maximum time in seconds to wait for the flushing of each chunk;
            if the `batch_limit` is reached before this time is reached
            the messages are immediately flushed to the client.
          type: integer
          format: int32
          required: false
        - name: stream_timeout
          in: query
          description: |
            Maximum time in seconds a stream will live before being interrupted.
            If unspecified will stream indefinately.

            If this timeout is reached any pending messages (in the sense of
            `stream_limit`) will be flushed to the client.

            Stream initialization will fail if `stream_timeout` is lower than
            `batch_flush_timeout`.
          type: integer
          format: int32
          required: false
        - name: batch_keep_alive_limit
          in: query
          description: |
            Maximum number of keep-alive messages to get in a row
            before closing the connection.
            Unlimited by default.
          type: integer
          format: int32
          required: false
      responses:
        '200':
          description: |
            Starts streaming to the client.  
            Stream format is a continuous series of
            `SimpleStreamEvent`s separated by `\n`
          schema:
            $ref: '#/definitions/SimpleStreamEvent'
        '400':
          description: Bad syntax
          schema:
            $ref: '#/definitions/Problem'
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: Not found. Typically in case of requesting from a non existing topic of partition.
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Not found. Typically in case of requesting from a non existing topic of partition.
          schema:
            $ref: '#/definitions/Problem'
  /subscriptions:
    get:
      tags:
        - monitoring
      summary: List event subscriptions
      description: |
        Lists all subscriptions currently registered.
        Subscriptions are the binding point for the high-level usage of event store,
        registering an interested party that listens to a topic
        and expected to receive its events, with the possibility of a filter
        being applied to the messages the flow out
      operationId: nakadi.hack.get_subscriptions
      responses:
        '200':
          description: List of subscriptions
          schema:
            type: array
            items:
              $ref: '#/definitions/Subscription'
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
    post:
      tags:
        - push-api
        - streaming-api
      summary: Create event subscription
      description: Creates event subscription for the given `Topic`. If the application already has a subscription to the topic the existing one is returned.
      operationId: nakadi.hack.post_subscription
      parameters:
        - name: subscription
          in: body
          description: |
            Description of a subscription.

              - `id` MUST not left unset;
              - `topic` specifies the topic name to which a subscription
                is being done;
              - `application` defines the namespace for this `Subscription`,
                being, together with the topic, unique for this Nakadi cluster.
          schema:
            $ref: '#/definitions/Subscription'
          required: true
      responses:
        '200':
          description: OK. The returned object is an already existing `Subscription`.
        '201':
          description: Resource created. The returned object will contain a `subscription_id` for this newly registered subscription.
          schema:
            $ref: '#/definitions/Subscription'
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: Not found. Usually because of non existing `Topic`.
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available. Usually in case of problems communicating with the backing Kafka server.
          schema:
            $ref: '#/definitions/Problem'
  '/subscriptions/{subscription_id}':
    get:
      tags:
        - push-api
        - streaming-api
      summary: Returns status information about the given `Subscription`.
      operationId: nakadi.hack.get_subscription
      parameters:
        - name: subscription_id
          in: path
          description: Id of the requested `Subscription`
          type: string
          format: uuid
          required: true
      responses:
        '200':
          description: OK
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Problem'
    delete:
      tags:
        - push-api
        - streaming-api
      summary: Delete event subscriptions. TODO do we cascade to existing clients?
      operationId: nakadi.hack.delete_subscription
      parameters:
        - name: subscription_id
          in: path
          description: id of the `Subscription` to be deleted.
          type: string
          required: true
      responses:
        '204':
          description: Resource deleted
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: Subscription does not exist
          schema:
            $ref: '#/definitions/Problem'
  '/subscriptions/{subscription_id}/clients':
    get:
      tags:
        - streaming-api
      summary: Lists all registered `StreamClient`s for this `Subscription`.
      operationId: nakadi.hack.get_subscription_clients
      parameters:
        - name: subscription_id
          in: path
          description: Id of the `Subscription` from which to list clients
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/StreamClient'
    post:
      tags:
        - streaming-api
      summary: Registers a new StreamClient for this Subscription.
      description: |
        A `StreamClient` is the control entity for a managed flow of events from
        Nakadi to a client.

        Upon registration of a new client consumer rebalancing takes place.

        Submission might be interrupting during this time and the newly defined
        topology will be communicated to already existing (and connected)
        `StreamClient`s. Id is generated and returned.

        A new client will... TODO
      operationId: nakadi.hack.post_subscription_client
      parameters:
        - name: subscription_id
          in: path
          description: Id of the `Subscription` from which to list clients
          type: string
          required: true
        - name: client
          in: body
          description: Description
          required: true
          schema:
            $ref: '#/definitions/StreamClient'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/StreamClient'
        '404':
          description: Not found
        '500':
          description: Client count exceeds partitions
  '/subscriptions/{subscription_id}/clients/{client_id}':
    get:
      tags:
        - streaming-api
      summary: Gets information on this client.
      operationId: nakadi.hack.get_client
      parameters:
        - name: subscription_id
          in: path
          type: string
          format: uuid
          required: true
        - name: client_id
          in: path
          type: string
          format: uuid
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/StreamClient'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/Problem'
  '/subscriptions/{subscription_id}/clients/{client_id}/cursors':
    get:
      tags:
        - streaming-api
      summary: Gets the current status of the Cursors for this client.
      operationId: nakadi.hack.get_client_cursors
      parameters:
        - name: subscription_id
          in: path
          type: string
          format: uuid
          required: true
        - name: client_id
          in: path
          type: string
          format: uuid
          required: true
      responses:
        '200':
          description: List of current Cursors for this client.
          schema:
            type: array
            items:
              $ref: '#/definitions/Cursor'
        '404':
          description: Not found
    patch:
      summary: Commit the progress (new state of Cursors) for this client.
      operationId: nakadi.hack.commit_cursor
      parameters:
        - name: subscription_id
          in: path
          type: string
          format: uuid
          required: true
        - name: client_id
          in: path
          type: string
          format: uuid
          required: true
      responses:
        '201':
          description: Updated
  '/subscriptions/{subscription_id}/clients/{client_id}/events':
    get:
      tags:
        - streaming-api
      summary: Starts streaming events for this client..
      operationId: nakadi.hack.stream_for_client
      parameters:
        - name: subscription_id
          in: path
          type: string
          format: uuid
          required: true
        - name: client_id
          in: path
          type: string
          format: uuid
          required: true
        - name: batch_limit
          in: query
          type: integer
          required: false
        - name: timeout
          in: query
          type: integer
          required: false
      responses:
        '200':
          description: |
            Starts streaming events to the client.
            The stream format is a series of SimpleStreamEvents separated by a `\n`
          schema:
            $ref: '#/definitions/SimpleStreamEvent'
        '404':
          description: Not found
definitions:
  Event:
    type: object
    description: |
      This is the most general representation of an event, that can be processed
      by Nakadi.

      It should be used as a base definition for all events, that flow through
      Nakadi by extending attributes of this object type.
    properties:
      event_type:
        type: string
        example: 'https://resource-events.zalando.com/ResourceCreated'
      partitioning_key:
        type: string
        example: 'ARTICLE:ABC123XXX-001'
      metadata:
        $ref: '#/definitions/EventMetaData'
  EventMetaData:
    type: object
    properties:
      id:
        type: string
        format: uuid
      created:
        type: string
        format: data-time
      root_id:
        type: string
        format: uuid
      parent_id:
        type: string
        format: uuid
      scopes:
        type: array
        items:
          type: string
  Problem:
    type: object
    required:
      - detail
    properties:
      detail:
        type: string
        description: Problem description
        example: Topic does not exist
  Metrics:
    type: object
  Topic:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Topic name
        example: article.120
  Subscription:
    required:
      - topic
      - application
    properties:
      id:
        type: string
        format: uuid
        example: 346c685a-6abf-4841-886e-25bbae7a6f3a
      topic:
        type: string
        example: article.120
      callback:
        type: string
        example: 'https://myservice.example.org/events'
      application:
        type: string
        example: My event processor for use case X
      default_client_ttl:
        type: integer
        example: 3600
  StreamClient:
    properties:
      id:
        type: string
        format: uuid
      topic:
        type: string
      subscription_id:
        type: string
        format: uuid
      expires_at:
        type: string
        format: date-time
  TopicPartition:
    required:
      - partition
      - oldest_available_offset
      - newest_available_offset
    properties:
      partition:
        type: string
      oldest_available_offset:
        type: string
      newest_available_offset:
        type: string
  Cursor:
    required:
      - partition
      - offset
    properties:
      partition:
        type: string
      offset:
        type: string
  SubscriptionFilter:
    required:
      - filter_expression
    properties:
      filter_expression:
        type: object
  SimpleStreamEvent:
    required:
      - cursor
    properties:
      cursor:
        $ref: '#/definitions/Cursor'
      events:
        type: array
        items:
          $ref: '#/definitions/Event'
      topology:
        type: array
        items:
          type: object
          required:
            - client_id
            - partitions
          properties:
            client_id:
              type: string
            partitions:
              type: array
              items:
                type: string

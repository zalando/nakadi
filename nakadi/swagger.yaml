swagger: '2.0'
info:
  title: Nakadi API Definition
  description: |
    -------------------------
    Nakadi API Definition
    -------------------------

    * Low-level API
    * Stantardised event format (see #/definitions/Event);
    * Partition strategy: event store will infer the partition from the `partitioning_key` in the message body;

  version: '0.4'
  contact:
    name: Team Aruha @ Zalando
    email: nakadi-users@zalando.de
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  oauth2:
    description: |
      OAuth2 is used for authorization to write/read to/from Nakadi. Scopes are defined in resouces level.
    type: oauth2
    flow: implicit
    scopes:
      uid: Unique identifier of the user accessing the service.

paths:
  /metrics:
    get:
      tags:
        - monitoring
      summary: Get monitoring metrics
      operationId: nakadi.metrics.get
      responses:
        '200':
          description: Metrics data
          schema:
            $ref: '#/definitions/Metrics'
        '401':
          description: User is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
  /topics:
    get:
      description: Lists all known `Topics` of this Nakadi cluster
      tags:
        - monitoring
      responses:
        '200':
          description: The request was successful. Returns a list `Topic`s in the response body.
          schema:
            type: array
            description: An array of topics
            items:
              $ref: '#/definitions/Topic'
        '401':
          description: User is not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
  '/topics/{topic}/events':
    post:
      description: |
        Post a one or more `Event`s to a given `Topic`.
        The partition is implicitly controlled by the partitioning_key attribute of the event. Nakadi guarantees that
        all events with the same partitioning_key end up in the same partition.
      parameters:
        - name: topic
          in: path
          description: Topic name where to send events to
          type: string
          required: true
        - name: event
          in: body
          description: The body contains an array of events being sent.
          required: true
          schema:
            type: array
            description: An array of events to be pushed to Nakadi
            items:
              $ref: '#/definitions/Event'
        - name: Content-Encoding
          in: header
          required: false
          description: '"Allow the publisher to gzip compress the payload by setting this header to "gzip". For Example "Content-Encoding: gzip"'
          type: string
      responses:
        '201':
          description: All events are submitted successfully.
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '403':
          description: Not allowed
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
  '/topics/{topic}/partitions':
    get:
      tags:
        - low-level-api
        - monitoring
      summary: Lists the `Partition`s for the given topic
      parameters:
        - name: topic
          in: path
          description: Topic name
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: array
            description: An array of `Partition`s
            items:
              $ref: '#/definitions/Partition'
  '/topics/{topic}/partitions/{partition}':
    get:
      tags:
        - low-level-api
      summary: Returns the given `Partition` of this topic
      parameters:
        - name: topic
          in: path
          description: Topic name
          type: string
          required: true
        - name: partition
          in: path
          description: Partition id.
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Partition'
  '/topics/{topic}/partitions/{partition}/events':
    post:
      tags:
        - low-level-api
      summary: |
        Posts a batch of `Event`s to the specified partition of this topic.
        Note that this overwrites the evaluation of the partitioning_key.
      parameters:
        - name: topic
          in: path
          description: Topic where to send events to.
          type: string
          required: true
        - name: partition
          in: path
          description: Partition where which the events are stored.
          type: string
          required: true
        - name: Content-Encoding
          in: header
          required: false
          description: '"Allow the publisher to gzip compress the payload by setting this header to "gzip". For Example "Content-Encoding: gzip"'
          type: string
        - name: event
          in: body
          description: Array of `Event`s being sent.
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
      responses:
        '201':
          description: Event submitted.
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '403':
          description: Not allowed
          schema:
            $ref: '#/definitions/Problem'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/Problem'
        '503':
          description: Not available
          schema:
            $ref: '#/definitions/Problem'
    get:
      tags:
        - low-level-api
      summary: |
        Starts a stream delivery for the specified partition of the given topic. The events are send in batches.
        The tracking of the current position in the partition and of which
        partition is being read is in the responsibility of the client.
        No commits are needed.
      parameters:
        - name: topic
          in: path
          description: Topic to consume events from
          type: string
          required: true
        - name: partition
          in: path
          description: Id of the partition where to get events from
          type: string
          required: true
        - name: start_from
          in: query
          description: Starting offset of the stream. Must be in the range defined by the `Partition`.
          type: string
          required: true
        - name: batch_limit
          in: query
          description: Maximum number of `SimpleStreamElement`s in each chunk of the stream. If unspecified assumes default value 1 (i.e. each event is individually submitted).
          type: integer
          format: int32
          required: false
          default: 1
        - name: stream_limit
          in: query
          description: |
            Maximum number of `Event`s in this stream. If 0 or undefined, will stream indefinately.
            Stream initialization will fail if `stream_limit` is lower than `batch_limit`.
          type: integer
          format: int32
          required: false
        - name: batch_flush_timeout
          in: query
          description: |
            Maximum time in seconds to wait for the flushing of each chunk; if the `batch_limit` is reached before this
            time is reached the messages are immediately flushed to the client.
            A value of 0 will flush every batch events immediatly as soon as they come in.
          type: integer
          format: int32
          required: false
        - name: stream_timeout
          in: query
          description: |
            Maximum time in seconds a stream will live before being interrupted. If unspecified will stream
            indefinately.
            If this timeout is reached any pending messages (in the sense of `stream_limit`) will be flushed to the
            client.
            Stream initialization will fail if `stream_timeout` is lower than `batch_flush_timeout`.
          type: integer
          format: int32
          required: false
        - name: batch_keep_alive_limit
          in: query
          description: |
            Maximum number of keep-alive messages to get in a row
            before closing the connection.
            Unlimited by default.
          type: integer
          format: int32
          required: false
        - name: Accept-Encoding
          in: header
          required: false
          description: '"If set the client requests the body to be gzip compressed. For Example "Content-Encoding: gzip"'
          type: string
      responses:
        '200':
          description: |
            Starts streaming to the client.  
            Stream format is a continuous series of
            `SimpleStreamEvent`s separated by `\n`
          schema:
            $ref: '#/definitions/SimpleStreamEvent'
        '400':
          description: Bad syntax
          schema:
            $ref: '#/definitions/Problem'
        '401':
          description: Not authenticated
          schema:
            $ref: '#/definitions/Problem'
        '404':
          description: Not found. Typically in case of requesting from a non existing topic of partition.
          schema:
            $ref: '#/definitions/Problem'
        '500':
          description: Not found. Typically in case of requesting from a non existing topic of partition.
          schema:
            $ref: '#/definitions/Problem'


# ################################### #
#                                     #
#             Definitions             #
#                                     #
# ################################### #

definitions:
  Event:
    type: object
    description: |
      This is the most general representation of an event, that can be processed
      by Nakadi.

      It should be used as a base definition for all events, that flow through
      Nakadi by extending attributes of this object type.
    properties:
      event_type:
        type: string
        example: 'https://resource-events.zalando.com/ResourceCreated'
      partitioning_key:
        type: string
        example: 'ARTICLE:ABC123XXX-001'
      metadata:
        $ref: '#/definitions/EventMetaData'
  EventMetaData:
    type: object
    properties:
      id:
        type: string
        format: uuid
      created:
        type: string
        format: data-time
      root_id:
        type: string
        format: uuid
      parent_id:
        type: string
        format: uuid
      scopes:
        type: array
        items:
          type: string
  Problem:
    type: object
    required:
      - detail
    properties:
      detail:
        type: string
        description: Problem description
        example: Topic does not exist
  Metrics:
    type: object
  Topic:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Topic name
        example: article.120
  StreamClient:
    properties:
      id:
        type: string
        format: uuid
      topic:
        type: string
      subscription_id:
        type: string
        format: uuid
      expires_at:
        type: string
        format: date-time
  Partition:
    required:
      - partition
      - oldest_available_offset
      - newest_available_offset
    properties:
      partition:
        type: string
      oldest_available_offset:
        type: string
      newest_available_offset:
        type: string
  Cursor:
    required:
      - partition
      - offset
    properties:
      partition:
        type: string
      offset:
        type: string
  SimpleStreamEvent:
    required:
      - cursor
    properties:
      cursor:
        $ref: '#/definitions/Cursor'
      events:
        type: array
        items:
          $ref: '#/definitions/Event'
